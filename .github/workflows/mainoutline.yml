name: Generate Story from Outline

on:
  workflow_dispatch:
    inputs:
      outline_text:
        description: 'Story outline (JSON format with part, title, content)'
        required: true
        type: string

permissions:
  contents: write  # Required for pushing to repo

jobs:
  generate-story:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Run Enhanced Story Generator
      env:
        INPUT_OUTLINE_TEXT: ${{ github.event.inputs.outline_text }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        python3 - <<EOF
        import os
        import json
        import time
        import requests
        import re
        from datetime import datetime, timedelta

        class StoryState:
            def __init__(self):
                self.story_parts = []
                self.character_memory = {}
                self.rolling_summary = ""
                self.active_characters = []
                self.current_time = "Morning, Day 1"
                self.current_location = "Unknown"
                self.story_tone = "neutral"
                self.plot_threads = []
                
            def add_part(self, part_data):
                self.story_parts.append(part_data)
                self.update_state(part_data)
            
            def update_state(self, part_data):
                # Update character memory
                for char in part_data.get('characters_mentioned', []):
                    if char not in self.character_memory:
                        self.character_memory[char] = {
                            'emotional_arc': [],
                            'last_location': self.current_location,
                            'background': '',
                            'status': 'healthy'
                        }
                    
                    # Update character emotional state
                    self.character_memory[char]['emotional_arc'].append(part_data.get('scene_emotion', 'neutral'))
                    self.character_memory[char]['last_location'] = part_data.get('location', self.current_location)
                
                # Update active characters
                self.active_characters = part_data.get('characters_mentioned', [])
                
                # Update current time and location
                self.current_time = part_data.get('time', self.current_time)
                self.current_location = part_data.get('location', self.current_location)
                self.story_tone = part_data.get('scene_emotion', self.story_tone)
                
                # Update rolling summary (keep it concise)
                self.update_rolling_summary()
            
            def update_rolling_summary(self):
                # Keep summary of last 2-3 parts for context
                recent_parts = self.story_parts[-3:] if len(self.story_parts) > 3 else self.story_parts
                summary_parts = []
                
                for part in recent_parts:
                    if 'summary' in part and part['summary']:
                        summary_parts.append(part['summary'])
                
                self.rolling_summary = " ".join(summary_parts)
            
            def get_rolling_context(self):
                # Return last 2 parts for context
                return self.story_parts[-2:] if len(self.story_parts) >= 2 else self.story_parts
            
            def get_last_paragraph(self):
                if not self.story_parts:
                    return ""
                
                last_text = self.story_parts[-1]['text']
                paragraphs = [p.strip() for p in last_text.split('\\n') if p.strip()]
                return paragraphs[-1] if paragraphs else ""
            
            def format_character_memory(self):
                memory_lines = []
                for name, state in self.character_memory.items():
                    mood_progression = " ‚Üí ".join(state['emotional_arc'][-3:]) if state['emotional_arc'] else "unknown"
                    memory_lines.append(
                        f"{name} ‚Äî Mood: {mood_progression}, Status: {state.get('status', 'healthy')}, "
                        f"Location: {state['last_location']}, Background: {state.get('background', 'developing')}"
                    )
                return "\\n".join(memory_lines)

        class StoryGenerator:
            def __init__(self, api_key):
                self.api_key = api_key
                self.url = "https://openrouter.ai/api/v1/chat/completions"
                self.headers = {
                    "Authorization": f"Bearer {api_key}",
                    "Content-Type": "application/json",
                    "HTTP-Referer": "https://your-site.com",
                    "X-Title": "Advanced Story Generator"
                }
                self.state = StoryState()
                self.retry_count = 3
            
            def extract_metadata(self, story_text, point_description):
                """Extract metadata from generated story using LLM"""
                metadata_prompt = f"""
                Analyze this story segment and extract metadata in JSON format:

                Story Text: {story_text[:500]}...

                Extract:
                {{
                    "characters_mentioned": ["list of character names mentioned"],
                    "scene_emotion": "primary emotion/tone (e.g., tense, hopeful, dramatic)",
                    "location": "where the scene takes place",
                    "time": "time of day/story timeline",
                    "summary": "2-sentence summary of what happened",
                    "plot_threads": ["key plot points introduced or resolved"]
                }}

                Respond with ONLY the JSON, no other text.
                """
                
                data = {
                    "model": "nvidia/llama-3.3-nemotron-super-49b-v1:free",
                    "messages": [{"role": "user", "content": metadata_prompt}]
                }
                
                try:
                    response = requests.post(self.url, headers=self.headers, data=json.dumps(data))
                    if response.status_code == 200:
                        result = response.json()
                        metadata_text = result['choices'][0]['message']['content'].strip()
                        # Try to parse JSON
                        metadata_text = re.sub(r'^```json\\s*', '', metadata_text)
                        metadata_text = re.sub(r'\\s*```$', '', metadata_text)
                        return json.loads(metadata_text)
                except Exception as e:
                    print(f"Metadata extraction failed: {e}")
                
                # Fallback metadata
                return {
                    "characters_mentioned": [],
                    "scene_emotion": "neutral",
                    "location": self.state.current_location,
                    "time": self.state.current_time,
                    "summary": point_description[:100] + "...",
                    "plot_threads": []
                }
            
            def build_continuation_prompt(self, outline_part, part_number, total_parts):
                """Build smart continuation prompt with full context"""
                is_first = part_number == 1
                is_last = part_number == total_parts
                
                part_title = outline_part.get('title', f'Part {part_number}')
                part_content = outline_part.get('content', '')
                
                base_style = (
                    "Write in a cinematic, dramatic storytelling style with these characteristics:\\n"
                    "- Use present tense throughout the narrative\\n"
                    "- Write with vivid, sensory details that paint clear mental pictures\\n"
                    "- Include dialogue that feels natural and reveals character\\n"
                    "- Build tension through pacing and atmosphere\\n"
                    "- Show emotions through actions and physical reactions\\n"
                    "- Create immersive scenes with specific details\\n"
                    "- Maintain perfect continuity with previous story elements\\n\\n"
                )
                
                if is_first:
                    return (
                        f"üé¨ START A CINEMATIC STORY\\n\\n"
                        f"{base_style}"
                        f"This is Part 1 of {total_parts}: {part_title}\\n"
                        f"Create a compelling opening that establishes:\\n"
                        f"- Main characters with distinct personalities\\n"
                        f"- Setting and atmosphere\\n"
                        f"- Central conflict or tension\\n"
                        f"- Hook that grabs attention\\n\\n"
                        f"üìã OUTLINE POINT TO DEVELOP:\\n{part_content}\\n\\n"
                        f"‚úçÔ∏è WRITE THE OPENING (600-800 words):\\n"
                        f"Write ONLY the story narrative. No titles, headers, or commentary.\\n"
                        f"Begin with immediate dramatic action or compelling dialogue."
                    )
                
                # For continuation parts, use full context system
                context_parts = self.state.get_rolling_context()
                rolling_summary = self.state.rolling_summary
                last_paragraph = self.state.get_last_paragraph()
                character_memory = self.state.format_character_memory()
                active_chars = ", ".join(self.state.active_characters) if self.state.active_characters else "To be determined"
                
                section_type = "FINAL PART" if is_last else "MIDDLE PART"
                narrative_intent = "Bring all threads to a powerful conclusion" if is_last else "Escalate tension and develop characters"
                
                return (
                    f"üé¨ CONTINUE THE CINEMATIC STORY\\n\\n"
                    f"You're writing Part {part_number} of {total_parts} ({section_type}): {part_title}\\n"
                    f"Continue with perfect emotional and narrative continuity.\\n\\n"
                    f"Maintain:\\n"
                    f"- Character personalities and arcs\\n"
                    f"- Emotional progression\\n"
                    f"- Logical causality\\n"
                    f"- Consistent time and location flow\\n\\n"
                    f"---\\n\\n"
                    f"üßæ STORY SUMMARY SO FAR:\\n{rolling_summary}\\n\\n"
                    f"üé≠ LAST PARAGRAPH (Scene Memory):\\n{last_paragraph}\\n\\n"
                    f"üßç CHARACTER MEMORY:\\n{character_memory}\\n\\n"
                    f"üßë‚Äçü§ù‚Äçüßë ACTIVE CHARACTERS:\\n{active_chars}\\n\\n"
                    f"üïí CURRENT STORY TIME:\\n{self.state.current_time}\\n"
                    f"üó∫Ô∏è CURRENT LOCATION:\\n{self.state.current_location}\\n\\n"
                    f"üéØ OBJECTIVE FOR THIS PART:\\n{narrative_intent}\\n\\n"
                    f"üìã OUTLINE POINT TO DEVELOP:\\n{part_content}\\n\\n"
                    f"---\\n\\n"
                    f"‚úçÔ∏è WRITE THE NEXT PART:\\n"
                    f"Write in cinematic narrator style. Use strong emotional beats.\\n"
                    f"Maintain continuity with all above context.\\n"
                    f"Output 600-800 words.\\n"
                    f"End on a natural tension, cliffhanger, or reveal.\\n"
                    f"Write ONLY the story narrative - no titles, headers, or commentary."
                )
            
            def generate_story_part_with_retry(self, outline_part, part_number, total_parts):
                """Generate story part with retry logic and quality control"""
                for attempt in range(self.retry_count):
                    try:
                        prompt = self.build_continuation_prompt(outline_part, part_number, total_parts)
                        
                        data = {
                            "model": "nvidia/llama-3.3-nemotron-super-49b-v1:free",
                            "messages": [{"role": "user", "content": prompt}]
                        }
                        
                        response = requests.post(self.url, headers=self.headers, data=json.dumps(data))
                        
                        if response.status_code == 200:
                            result = response.json()
                            raw_story = result['choices'][0]['message']['content']
                            cleaned_story = self.clean_story_output(raw_story)
                            
                            # Quality check
                            if self.quality_check(cleaned_story, part_number):
                                return cleaned_story
                            else:
                                print(f"Quality check failed for part {part_number}, attempt {attempt + 1}")
                                continue
                        else:
                            print(f"API Error {response.status_code}: {response.text}")
                            
                    except Exception as e:
                        print(f"Generation attempt {attempt + 1} failed: {e}")
                        
                    time.sleep(2)  # Wait between retries
                
                return None
            
            def quality_check(self, story_text, part_number):
                """Basic quality control for generated story"""
                if not story_text or len(story_text) < 200:
                    return False
                
                # Check for continuation markers (if not first part)
                if part_number > 1:
                    # Should reference previous elements
                    has_continuity = any(char.lower() in story_text.lower() 
                                       for char in self.state.active_characters) if self.state.active_characters else True
                    return has_continuity
                
                return True
            
            def clean_story_output(self, raw_text):
                """Clean and format story output"""
                lines = raw_text.splitlines()
                cleaned_lines = []
                
                skip_patterns = [
                    r'^\\s*(\\*+|---+|###*|Point \\d+.*|End of.*|Preparation for.*|Continuity Notes.*|Please Provide.*|Generating story.*|Context.*|Tone:.*|Events:.*|Character Development:.*|NOTE:.*)',
                    r'.*outline.*',
                    r'^\\s*üé¨.*',
                    r'^\\s*‚úçÔ∏è.*',
                    r'^\\s*üìã.*'
                ]
                
                for line in lines:
                    if any(re.match(pattern, line, re.IGNORECASE) for pattern in skip_patterns):
                        continue
                    if "NOTE:" in line or line.strip().endswith(":") and len(line.strip()) < 50:
                        continue
                    cleaned_lines.append(line)
                
                return '\\n'.join(cleaned_lines).strip()
            
            def generate_complete_story(self, outline_parts):
                """Generate complete story with advanced continuation logic"""
                full_story = ""
                total_parts = len(outline_parts)
                
                for idx, outline_part in enumerate(outline_parts, start=1):
                    part_title = outline_part.get('title', f'Part {idx}')
                    part_content = outline_part.get('content', '')
                    
                    print(f"--- Generating story part {idx} of {total_parts}: {part_title} ---")
                    print(f"Content: {part_content[:100]}...")
                    
                    story_part = self.generate_story_part_with_retry(outline_part, idx, total_parts)
                    
                    if story_part:
                        print(f"‚úÖ Part {idx} generated successfully")
                        
                        # Extract metadata
                        metadata = self.extract_metadata(story_part, part_content)
                        metadata['part_number'] = idx
                        metadata['part_title'] = part_title
                        metadata['text'] = story_part
                        
                        # Add to state
                        self.state.add_part(metadata)
                        
                        # Add to full story
                        full_story += "\\n\\n" + story_part
                        
                        print(f"Characters: {metadata.get('characters_mentioned', [])}")
                        print(f"Emotion: {metadata.get('scene_emotion', 'neutral')}")
                        print(f"Location: {metadata.get('location', 'unknown')}")
                        print("")
                        
                        time.sleep(3)  # Rate limiting
                    else:
                        print(f"‚ùå Failed to generate part {idx} after {self.retry_count} attempts")
                        break
                
                return full_story.strip()

        def main():
            outline_text = os.getenv("INPUT_OUTLINE_TEXT", "")
            api_key = os.getenv("OPENROUTER_API_KEY")
            
            if not api_key:
                print("Error: OPENROUTER_API_KEY not found")
                return
            
            # Parse JSON outline
            try:
                outline_data = json.loads(outline_text)
                if not isinstance(outline_data, list):
                    print("Error: Outline must be a JSON array")
                    return
                
                # Sort by part number to ensure correct order
                outline_parts = sorted(outline_data, key=lambda x: x.get('part', 0))
                
            except json.JSONDecodeError as e:
                print(f"Error parsing JSON outline: {e}")
                return
            
            if not outline_parts:
                print("Error: No outline parts found")
                return
            
            print(f"Found {len(outline_parts)} outline parts")
            
            # Initialize generator
            generator = StoryGenerator(api_key)
            
            # Generate story
            full_story = generator.generate_complete_story(outline_parts)
            
            # Save story
            with open("generated_story.txt", "w") as f:
                f.write(full_story)
            
            # Save story state for debugging
            with open("story_state.json", "w") as f:
                json.dump({
                    "story_parts": generator.state.story_parts,
                    "character_memory": generator.state.character_memory,
                    "rolling_summary": generator.state.rolling_summary,
                    "final_state": {
                        "active_characters": generator.state.active_characters,
                        "current_time": generator.state.current_time,
                        "current_location": generator.state.current_location,
                        "story_tone": generator.state.story_tone
                    }
                }, f, indent=2)
            
            print(f"‚úÖ Story generation complete! Generated {len(generator.state.story_parts)} parts.")
            print(f"Final character count: {len(generator.state.character_memory)}")
            print(f"Characters: {list(generator.state.character_memory.keys())}")

        if __name__ == "__main__":
            main()
        EOF

    - name: Set up Git identity
      run: |
        git config --global user.name "ansentase"
        git config --global user.email "samomsan7@gmail.com"

    - name: Commit and push generated story
      
